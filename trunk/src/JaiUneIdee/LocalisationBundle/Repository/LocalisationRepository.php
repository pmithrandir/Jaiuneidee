<?php

namespace JaiUneIdee\LocalisationBundle\Repository;

use Doctrine\ORM\EntityRepository;
use JaiUneIdee\LocalisationBundle\Entity\Localisation;

/**
 * LocalisationRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class LocalisationRepository extends EntityRepository
{
    public function findAllIdScalar()
    {
        $qb = $this->createQueryBuilder('l');
        $qb->select("l.id")
            ->addOrderBy('l.min', 'ASC')
            ;
    	return $qb->getQuery()->getScalarResult();
    }
    public function getListe($param)
    {
        $qb = $this->createQueryBuilder('l');
        $qb->select("l.id, CONCAT(l.nom, CONCAT(".$qb->expr()->literal(' (').", CONCAT(CASE WHEN p.nom IS NULL THEN 'Pays entier' ELSE p.nom END,".$qb->expr()->literal(')')."))) as nom");
        $qb->add('where', $qb->expr()->like('UPPER(l.nom)','UPPER(:param)'))
           ->addOrderBy('l.population', 'DESC')
           ->addOrderBy('l.niveau', 'ASC')
           ->addOrderBy('l.nom', 'ASC');
        $qb->leftjoin('l.parent', 'p');
        $qb->setParameter('param', '%'.$param.'%');
        $query = $qb->getQuery();
        $query->useResultCache(true);
        $query->setResultCacheLifetime(2000000);
    	return $query->getArrayResult();
    }
    public function getListeSousDomaine()
    {
        $qb = $this->createQueryBuilder('l');
        $qb->andWhere('l.urlName IS NOT NULL')
           ->addOrderBy('l.population', 'ASC')
           ->addOrderBy('l.niveau', 'ASC')
           ->addOrderBy('l.nom', 'ASC');
        $query = $qb->getQuery();
        $query->useResultCache(true);
        $query->setResultCacheLifetime(3600);
    	return $query->getResult();
    }
    
    public function insertElementProcess($minParent, $maxParent){
        $qb = $this->createQueryBuilder('l');
        $query = $qb->update()
            ->set('l.max', 'l.max + 2')
            ->where('l.max >= :maxParent')
            ->setParameter("maxParent", $maxParent)
            ->getQuery();
        $p = $query->execute();
        $qb = $this->createQueryBuilder('l');
        $query = $qb->update()
            ->set('l.min','l.min + 2')
            ->where('l.min > :maxParent')
            ->setParameter("maxParent", $maxParent)
            ->getQuery();
        $p = $query->execute();
    }
    public function preRemoveProcess(Localisation $localisation, Localisation  $parent){
        //attribuer mon parent a tous mes enfants directs
        $qb = $this->createQueryBuilder('l');
        $query = $qb->update()
            ->set('l.parent', $parent->getId())
            ->set('l.niveau', $parent->getNiveau()+1)
            ->where('l.parent = :localisation')
            ->setParameter("localisation", $localisation)
            ->getQuery();
        $p = $query->execute();
    }
    public function deleteElementProcess($min, $max,Localisation  $parent){
        $qb = $this->createQueryBuilder('l');
        $query = $qb->update()
            ->set('l.min','l.min - 1')
            ->set('l.max', 'l.max - 1')
            ->where('l.max < :max')
            -> andWhere('l.min > :min')
            ->setParameter("min", $min)
            ->setParameter("max", $max)
            ->getQuery();
        $p = $query->execute();
        $qb = $this->createQueryBuilder('l');
        $query = $qb->update()
            ->set('l.max', 'l.max - 2')
            ->where('l.max >= :max')
            ->setParameter("max", $max)
            ->getQuery();
        $p = $query->execute();
        $qb = $this->createQueryBuilder('l');
        $query = $qb->update()
            ->set('l.min','l.min - 2')
            ->where('l.min >= :max')
            ->setParameter("max", $max)
            ->getQuery();
        $p = $query->execute();
    }
    public function updateElementProcess(Localisation $localisation, Localisation $newParent){
        //agrandir le parent final à droite
        $tailleElement = $localisation->getMax()-$localisation->getMin()+1;
        $correction = 0;
        if ($newParent->getMax() < $localisation->getMax()){
            $correction = $tailleElement;
        }
        $diff = $localisation->getMin()+$correction-$newParent->getMax();
        //on créé l'emplacement pour accueillir les éléments
        $qb = $this->createQueryBuilder('l');
        $query = $qb->update()
            ->set('l.max', "l.max + $tailleElement")
            ->where('l.max >= :destMax')
            ->setParameter("destMax", $newParent->getMax())
            ->getQuery();
        $p = $query->execute();
        $qb = $this->createQueryBuilder('l');
        $query = $qb->update()
            ->set('l.min', "l.min + $tailleElement")
            ->where('l.min > :destMin')
            ->setParameter("destMin", $newParent->getMax())
            ->getQuery();
        $p = $query->execute();
        //decaler tous les elements dans le nouveau parent
        $qb = $this->createQueryBuilder('l');
        $query = $qb->update()
            ->set('l.min', "l.min - $diff")
            ->set('l.max', "l.max - $diff")
            ->where('l.min >= :min')
            ->andWhere('l.max <= :max')
            ->setParameter("min", $localisation->getMin()+$correction)
            ->setParameter("max", $localisation->getMax()+$correction)
            ->getQuery();
        $p = $query->execute();
        //on rebouche le trou
         $qb = $this->createQueryBuilder('l');
        $query = $qb->update()
            ->set('l.min', "l.min - $tailleElement")
            ->where('l.min >= :oldMinCorrige')
            ->setParameter("oldMinCorrige", $localisation->getMin()+$correction)
            ->getQuery();
        $p = $query->execute();
        $qb = $this->createQueryBuilder('l');
        $query = $qb->update()
            ->set('l.max', "l.max - $tailleElement")
            ->where('l.max >= :oldMaxCorrige')
            ->setParameter("oldMaxCorrige", $localisation->getMax()+$correction)
            ->getQuery();
        $p = $query->execute();
        $qb = $this->createQueryBuilder('l');
    }
}